pipeline {
    agent any

    stages {
        stage('Export Credentials') {
            steps {
                script {
                    // 假设这是你的credentials ID列表
                    def credentialIds = ['cred-id-1', 'cred-id-2', 'cred-id-3', 'cred-id-4', 'cred-id-5']

                    // 用于存储JSON格式的凭据
                    def jsonCredentials = []

                    // 获取Jenkins凭据存储
                    def credentialsStore = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

                    // 遍历每个credential ID
                    credentialIds.each { credId ->
                        def credential = credentialsStore.getCredentials(lookupCredentialsId(credId))

                        if (credential == null) {
                            echo "Credential with ID ${credId} not found!"
                            return
                        }

                        // 根据凭据类型处理
                        if (credential instanceof com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl) {
                            // 处理 Username with Password
                            def credData = [
                                id: credId,
                                type: 'UsernameWithPassword',
                                username: credential.username,
                                password: credential.password.getPlainText()
                            ]
                            jsonCredentials << credData
                            echo "Processed Username with Password credential: ${credId}"

                        } else if (credential instanceof com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials) {
                            // 处理 Secret Text
                            def credData = [
                                id: credId,
                                type: 'SecretText',
                                secret: credential.secret.getPlainText()
                            ]
                            jsonCredentials << credData
                            echo "Processed Secret Text credential: ${credId}"

                        } else if (credential instanceof com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey) {
                            // 处理 SSH Username with Private Key
                            def fileName = "${credId}_private_key"
                            writeFile file: fileName, text: credential.privateKey
                            echo "Exported SSH Private Key to file: ${fileName}"

                        } else if (credential instanceof org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl) {
                            // 处理 Secret File
                            def fileName = "${credId}_secret_file"
                            writeFile file: fileName, text: credential.content.text
                            echo "Exported Secret File to: ${fileName}"

                        } else if (credential instanceof com.github.jenkinsci.plugins.githubapp.GitHubAppCredentials) {
                            // 处理 GitHub App（仅导出基本信息，具体实现可能需要根据插件API调整）
                            echo "GitHub App credential found: ${credId}. Exporting not supported in this script."
                            // GitHub App凭据通常需要特殊处理，可能需要API调用，暂不导出
                        } else {
                            echo "Unsupported credential type for ID: ${credId}"
                        }
                    }

                    // 将Secret Text和Username with Password的凭据写入JSON文件
                    if (!jsonCredentials.isEmpty()) {
                        def jsonOutput = groovy.json.JsonOutput.toJson(jsonCredentials)
                        writeFile file: 'credentials.json', text: groovy.json.JsonOutput.prettyPrint(jsonOutput)
                        echo "Exported JSON credentials to: credentials.json"
                    }
                }
            }
        }
    }
}

// 辅助方法：查找凭据ID
def lookupCredentialsId(String credId) {
    return com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.Credentials.class,
        Jenkins.instance,
        null,
        null
    ).find { it.id == credId }
}
