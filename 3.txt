def checkGitHubRepoPermission(String userId) {
    def token = env.GITHUB_TOKEN
    def repoOwner = env.REPO_OWNER
    def repoName = env.REPO_NAME

    // 检查组织Owner权限（优先）
    def orgMembershipUrl = "https://api.github.com/orgs/${repoOwner}/memberships/${userId}"
    def membershipResponse = httpRequest(
        url: orgMembershipUrl,
        authentication: 'github-token',
        httpMode: 'GET',
        customHeaders: [[name: 'Accept', value: 'application/vnd.github.v3+json']]
    )
    if (membershipResponse.status == 200) {
        def membership = readJSON text: membershipResponse.content
        if (membership.role == 'admin') {
            return true // 组织Owner
        }
    }

    // 检查直接协作者
    def collaboratorUrl = "https://api.github.com/repos/${repoOwner}/${repoName}/collaborators/${userId}"
    def collaboratorResponse = httpRequest(
        url: collaboratorUrl,
        authentication: 'github-token',
        httpMode: 'GET',
        customHeaders: [[name: 'Accept', value: 'application/vnd.github.v3+json']]
    )
    if (collaboratorResponse.status == 204) {
        return true // 用户是协作者
    }

    // 检查团队权限（处理分页）
    def teamsUrl = "https://api.github.com/repos/${repoOwner}/${repoName}/teams"
    def teamsResponse = httpRequest(
        url: teamsUrl,
        authentication: 'github-token',
        httpMode: 'GET',
        customHeaders: [[name: 'Accept', value: 'application/vnd.github.v3+json']]
    )
    def teams = readJSON text: teamsResponse.content
    for (team in teams) {
        // 检查团队对仓库的权限
        def teamPermissionUrl = "https://api.github.com/teams/${team.id}/repos/${repoOwner}/${repoName}"
        def permissionResponse = httpRequest(
            url: teamPermissionUrl,
            authentication: 'github-token',
            httpMode: 'GET',
            customHeaders: [[name: 'Accept', value: 'application/vnd.github.v3+json']]
        )
        def permission = readJSON text: permissionResponse.content
        if (permission.permissions?.push) {
            // 获取团队成员，处理分页
            def page = 1
            def perPage = 100 // 最大每页100条
            while (true) {
                def teamMembersUrl = "https://api.github.com/teams/${team.id}/members?per_page=${perPage}&page=${page}"
                def membersResponse = httpRequest(
                    url: teamMembersUrl,
                    authentication: 'github-token',
                    httpMode: 'GET',
                    customHeaders: [[name: 'Accept', value: 'application/vnd.github.v3+json']]
                )
                def members = readJSON text: membersResponse.content
                if (members.isEmpty()) {
                    break // 没有更多成员，退出循环
                }
                if (members.any { it.login == userId }) {
                    return true // 用户在团队中且团队有write权限
                }
                page++ // 获取下一页
            }
        }
    }
    return false
}
